# === Stage 1: Build Dependencies & Application ===
# Use Node.js 18 Alpine as the base for building
FROM node:18-alpine AS builder

# Set the working directory inside the container
WORKDIR /app

# Copy package files first for layer caching
COPY package*.json ./

# Install ONLY production dependencies first (good for caching final stage if needed later)
# Although not strictly necessary with the current final stage, it's a good pattern
RUN npm ci --only=production

# Copy Prisma schema
COPY prisma ./prisma/

# Generate Prisma Client (Needs @prisma/client, installed above)
RUN npx prisma generate

# Now install ALL dependencies (including dev) needed for build
# This might reinstall prod deps, but ensures devDeps are present
RUN npm install --include=dev

# Copy the rest of the application source code
COPY . .

# Build the NestJS application (compiles TS to JS in /dist)
RUN npm run build

# === Stage 2: Final Production Image ===
# Use a fresh, clean Node.js 18 Alpine image
FROM node:18-alpine

# Set the working directory
WORKDIR /app

# Set environment to production
ENV NODE_ENV production

# Create non-root user and group for security
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nestjs

# Copy essential files from the 'builder' stage
# Copy production node_modules (generated by the first npm ci --only=production)
COPY --from=builder /app/node_modules ./node_modules
# Copy compiled application code
COPY --from=builder --chown=nestjs:nodejs /app/dist ./dist
# Copy Prisma schema (needed if running migrations later, good practice)
COPY --from=builder /app/prisma ./prisma/
# Copy package.json (might be needed by runtime/Prisma)
COPY package.json ./

# --- FIX: Create uploads directory AND set correct ownership ---
RUN mkdir uploads && chown nestjs:nodejs uploads
# -------------------------------------------------------------

# Switch execution to the non-root user
USER nestjs

# Expose the internal port the NestJS app listens on (usually 3000)
# (Port mapping to the host is done in docker-compose.yml)
EXPOSE 3000

# Define the command to run the application
CMD ["node", "dist/main"]